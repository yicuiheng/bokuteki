# Bokuteki

Bokuteki は yicuiheng のための軽量ドキュメント記述言語である。
Markdown を基にしているが yicuiheng が使わない機能は実装せず、欲しい機能だけを実装している。
具体的には以下を実装している。

- 見出し
- 段落
- 強調/斜体/small-caps など (partially implemented)
- (順序なし|順序つき) リスト
- 引用
- リンク
- チェックボックス (not implemented)
- 数式環境 (定理、補題、定義、証明)
- 推論規則、導出木 (not implemented)
- フローチャート、シーケンス図、ダイアグラムなど (mermaid形式) (not implemented)
- (インライン|ブロック) 数式
- (インライン|ブロック) コード
- コード分割

既存実装の Markdown を使うのに比べて以下の利点がある。
- 推論規則 など yicuiheng が特別によく使う要素を自分にとって使いやすい形式で書ける
- yicuiheng にとって不要な機能で無駄に構文解析を複雑にしなくてすむ
  - 例えばよく使われる Markdown では `*` がリストの prefix なのか斜体の `*` なのか曖昧になりうるが、 Bokuteki ではリストの prefix が `-` に限定されているのでこの曖昧性は生じない

## 使い方


Bokuteki ファイル `hoge.bok` をルートとするドキュメントを HTML にしたい場合、以下を実行すればよい。
```
$ bokuteki hoge.bok
```

これを実行すると `./output` ディレクトリに結果が出力され、 `./output/index.html` を開くと欲しい結果が得られる。

## 文法

### 見出し

よくある Markdown と同様に `#` で始まる行は見出しになる。

### 段落



### 強調/斜体/small-caps など

`%` で囲った文字列は small-caps で表示されます。これは推論規則のルール名などに使われる。
強調や斜体は未実装。


### (順序なし|順序つき)リスト

ハイフン (`-`) 始まりは順序なしリストを表す。
- hoge
- fuga
- piyo

リストのネストもできる
- foo
  - foofoo
- bar
  - foobar
    - foobarbaz
    - dayo
  - neko
- baz 

### 引用

`>` で始まる行は引用になる

> こんなふうにね
> ほら

### リンク

Markdown 形式でリンクをはれます。[こんな](https://example.com) 風にね。

### チェックボックス

未実装

- [x] hoge
- [ ] fuga
- [x] piyo

### 数式環境 (定理、補題、定義、証明)

theorem. 定理の名前
  定理の statement

```
theorem. 定理の名前
  定理の statement
```

lemma. 補題の名前
  補題の statement
  
```
lemma. 補題の名前
  補題の statement
```

definition. <定義の名前>
  定義

```
definition. <定義の名前>
  定義
```

proof.
  $\Gamma \vdash e \colon \tau$ の導出に関する帰納法による。
  - %T-Var% の場合:
    自明
  - %T-App% の場合:
    自明
  - そのほかの場合:
    自明っちゃあ自明

### 推論規則、導出木

推論規則を書ける。

  $\Gamma \vdash t_1 \colon \tau \to \tau'$
  $\Gamma \vdash t_2 \colon \tau$
---------------------------------------- %T-App%
  $\Gamma \vdash t_1 \ t_2 \colon \tau'$


      $x\colon\mathtt{Bool} \in x\colon\mathtt{Bool}$
    ------------------------------------------------------ %T-Var%
      $x\colon\mathtt{Bool} \vdash x  \colon \mathtt{Bool}$
  -------------------------------------------------------------------------------- %T-Abs%
    $\vdash \lambda x\colon \mathtt{Bool}.\ x \colon \mathtt{Bool} \to \mathtt{Bool}$
  
  -------------------------------------------- %T-True%
    $\vdash \mathtt{true} \colon \mathtt{Bool}$
--------------------------------------------------------------------------------------- %T-App%
  $\vdash (\lambda x\colon \mathtt{Bool}.\ x) \ \mathtt{true} \colon \mathtt{Bool}$

### (インライン|ブロック) 数式

$\frac{x}{y}$ はインラインで表示されるが
$$
  \frac{x}{y}
$$
は別行立てで表示される

### (インライン|ブロック) コード

`hoge` はインラインで表示されるが
```
  hoge
```
はコードブロックとして表示される。

```c
int main() {
    return 0;
}
```
のようにシンタックスハイライトのために言語を指定できる。

### コード分割

```
import 'hoge'; // 同じディレクトリの hoge.bok を読み込む
import 'hoge/fuga'; // ./hoge/fuga.bok を読み込む
```
